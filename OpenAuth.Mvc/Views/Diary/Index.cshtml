@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>

    .abow_dialog {
        display: flex;
        justify-content: center;
        align-items: Center;
        overflow: auto;
    }
</style>
<div id="robotm">
    <el-container class="container">
        <el-main class="main">
            <div class="backdiv">
                <el-row :gutter="5">
                    <el-col style="width:auto">
                        <el-button v-on:click="addItem" icon="el-icon-plus" style="background-color:lightskyblue;color:whitesmoke;">添加</el-button>
                        <el-button v-on:click="delItem" icon="el-icon-delete" style="background-color:orangered;color:whitesmoke;">删除</el-button>
                    </el-col>
                    <el-col :span="3">
                        <el-input v-model="inputCode" placeholder="代码"></el-input>
                    </el-col>
                    <el-col :span="3">
                        <el-input v-model="inputName" placeholder="名称"></el-input>
                    </el-col>
                    <el-col :span="3">
                        <el-button type="primary" plain class="el-icon-search" v-on:click="SeleceDate">查询</el-button>
                    </el-col>
                </el-row>
            </div>
            <div class="backdiv">
                <el-table :data="tableData" :border="false" fit v-on:selection-change="rowselchange" v-loading="loadingTable" element-loading-text="正在加载数据..."
                          :header-cell-style="{background:'white',color:'#555'}">
                    <el-table-column type="selection"
                                     width="55">
                    </el-table-column>
                    <el-table-column prop="code" :show-overflow-tooltip="true"
                                     label="代码">
                    </el-table-column>
                    <el-table-column prop="name" :show-overflow-tooltip="true"
                                     label="名称">
                    </el-table-column>
                    <el-table-column label="状态">
                        <template slot-scope="scope">
                            <span v-if="scope.row.status==1">
                                <i style="color:green" class="el-icon-success"></i>
                            </span>
                            <span v-if="scope.row.status==0">
                                <i class="el-icon-remove"></i>
                            </span>
                        </template>
                    </el-table-column>
                    <el-table-column label="操作">
                        <template scope="scope">
                            <el-button @@click="removeItem(scope.row)" type="text" size="small" plain circle icon="el-icon-delete"> 删除</el-button>
                            <el-button v-if="scope.row.status==1" @@click="stopItem(scope.row)" type="text" size="small" plain circle icon="el-icon-edit-outline"> 停止</el-button>
                            <el-button v-if="scope.row.status==0" @@click="startItem(scope.row)" type="text" size="small" plain circle icon="el-icon-edit-outline"> 启动</el-button>
                        </template>
                    </el-table-column>
                </el-table>
            </div>
            <div class="block">
                <el-pagination v-on:size-change="handleSizeChange"
                               v-on:current-change="handleCurrentChange"
                               :current-page="curr_page"
                               :page-sizes="pageSizes"
                               :page-size="curr_pageSize"
                               layout="total, sizes, prev, pager, next, jumper"
                               :total="totalnum"
                               v-if="totalnum!=0">
                </el-pagination>
            </div>
        </el-main>
    </el-container>

    <el-dialog :visible.sync="dialogFormVisible" :close-on-click-modal="false">
        <el-form>
            <el-form-item>
                <el-row>
                    <el-col>
                        <div>代码:</div>
                    </el-col>
                    <el-col>
                        <div><el-input v-model="ticket.Code" type="number" placeholder="代码"></el-input></div>
                    </el-col>
                </el-row>
                <el-row>
                    <el-col>
                        <div>名称:</div>
                    </el-col>
                    <el-col>
                        <div><el-input v-model="ticket.Name" placeholder="名称"></el-input></div>
                    </el-col>
                </el-row>
            </el-form-item>
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button v-on:click="dialogFormVisible = false">取 消</el-button>
            <el-button type="primary" v-on:click="confirm">确 定</el-button>
        </div>
    </el-dialog>
</div>
<script>
    var app = new Vue({
        el: '#robotm',
        data: {
            tableData: [],//表格数据
            loadingTable: false,//tablelist的loading
            selrow: [],//table中选中的数据
            inputCode: '',//股票代码输入框
            inputName: '',//名称
            dialogFormVisible: false,//dialog2可见

            curr_page: 1,//分页，当前页：1
            pageSizes: [10, 20, 50, 100, 300],//分页，页大小数组
            curr_pageSize: 10,//分页当前页大小
            totalnum: 0,//分页，共n条
            srcview: '',
            dialogDetail: false,
            ticket: { Code: '', Name: '' }
        },
        mounted: function mounted() {
            var url = window.location.search;
            if (url != "") {
                var paramsStr = (url.split("="))[1];
                var params = paramsStr.split(';');
                this.inputCode = params[0];
                this.inputName = params[1];
                this.curr_page = parseInt(params[2]);
                this.curr_pageSize = parseInt(params[3]);
            }
            this.getView();
        },
        methods: {
            //获取列表
            getView: function () {
                this.loadingTable = true;
                var code = this.inputCode; if (this.inputCode.length == 0) { code = ''; }
                var name = this.inputName; if (this.inputName.length == 0) { name = '' }
                axios.get('GetTickets?code=' + code + '&name=' + name + '&pageIndex=' + (this.curr_page - 1) + '&pageSize=' + this.curr_pageSize)
                    .then(res_total => {
                        console.log("logdata:" + res_total.data);
                        this.totalnum = res_total.data.countnum;
                        this.tableData = res_total.data.data;
                        this.loadingTable = false;
                    }).catch(err_total => { })

            },
            //条件查询按钮
            SeleceDate: function () {
                this.curr_page = 1;
                this.getView();
            },
            //选中行改变
            rowselchange: function (sel) {
                this.selrow = sel;
            },
            removeItem: function (row) {
                if (row.status == 1) {
                    this.$message({ type: 'success', message: row.code + '正在运行' });
                    return;
                }
                var rows = [];
                rows.push(row);
                axios.post('DelTicket', rows).then(res => {
                    this.$message({ type: 'success', message: '删除成功!' });
                    this.getView();
                });
            },
            startItem: function (row) {
                axios.post('StartTicket', row).then(res => {
                    if (res.data.code == 200) {
                        this.$message({ type: 'success', message: '启动成功!' });
                    }
                    this.getView();
                });
            },
            stopItem: function (row) {
                axios.post('StopTicket', row).then(res => {
                    if (res.data.code == 200) {
                        this.$message({ type: 'success', message: '已停止' });
                    }
                    this.getView();
                });
            },
            //删除
            delItem: function () {
                for (var i = 0; i < this.selrow.length; i++) {
                    if (this.selrow[i].status == 1) {
                        this.$message({
                            message: this.selrow[i].code + '正在运行', type: 'warning'
                        }); return;
                    }//选择了在线机器人提醒并return
                }
                if (this.selrow.length == 0) { this.$message({ message: '未选中行', type: 'warning' }); return; }

                this.$confirm('已选中' + this.selrow.length + '行,确定删除?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    axios.post('DelTicket', this.selrow).then(res => {
                        this.$message({ type: 'success', message: '删除成功!' });
                        this.getView();
                    });
                }).catch(() => {
                    this.$message({ type: 'info', message: '已取消删除' });
                });

            },
            //添加
            addItem: function () {
                this.dialogFormVisible = true;
            },
            //确定添加
            confirm: function () {
                if (this.ticket.Code.length != 6) {
                    this.$message({
                            message: '请检查代码长度',
                            type: 'warning'
                        });
                    return;
                }
                axios.post('AddTicket', this.ticket).then(res => {
                    if (res.data.code == 200) {
                        this.dialogFormVisible = false;
                        this.$message({
                            message: '添加成功',
                            type: 'success'
                        });
                        this.getView();
                    }
                })
            },
            //分页 页显示条数改变时
            handleSizeChange: function (val) {
                this.curr_pageSize = val;
                this.getView();
            },
            //分页 当前定位页数改变时
            handleCurrentChange: function (val) {
                console.log(`当前页: ${val}`);
                this.curr_page = val;
                this.getView();
            },
            //时间格式化
            formatTime: function (date) {
                var date = new Date(date);
                let o = {
                    'y+': date.getFullYear(),
                    'M+': date.getMonth() + 1,
                    'd+': date.getDate(),
                    'h+': date.getHours(),
                    'm+': date.getMinutes(),
                    's+': date.getSeconds()
                };
                for (var i = 1; i < o.length; i++) {
                    if (o[i].length == 1) {
                        o[i] = '0' + o[i];
                    }
                }
                if (o["M+"].toString().length == 1) {
                    o["M+"] = '0' + o["M+"].toString();
                }
                if (o["d+"].toString().length == 1) {
                    o["d+"] = '0' + o["d+"].toString();
                }
                if (o["h+"].toString().length == 1) {
                    o["h+"] = '0' + o["h+"].toString();
                }
                if (o["m+"].toString().length == 1) {
                    o["m+"] = '0' + o["m+"].toString();
                }
                if (o["s+"].toString().length == 1) {
                    o["s+"] = '0' + o["s+"].toString();
                }
                return (o["y+"] + '-' + o["M+"] + '-' + o["d+"] + "\n" + o["h+"] + ':' + o["m+"] + ':' + o["s+"]);
            }
        }
    })
</script>
